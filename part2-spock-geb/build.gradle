import org.apache.tools.ant.taskdefs.condition.Os

ext {
  // The drivers we want to use
  drivers = ["firefox", "chrome", "phantomJs"]

  ext {
    groovyVersion = '2.3.6'
    gebVersion = '0.9.3'
    seleniumVersion = '2.43.1'
    chromeDriverVersion = '2.10'
    phantomJsVersion = '1.9.7'
  }
}

apply plugin: "groovy"
apply plugin: "idea"
apply from: "gradle/osSpecificDownloads.gradle"

repositories {
  jcenter()
}

dependencies {
  // If using Spock, we need to depend on geb-spock
  testCompile "org.gebish:geb-spock:$gebVersion"
  testCompile("org.spockframework:spock-core:0.7-groovy-2.0") {
    exclude group: "org.codehaus.groovy"
  }
  testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"

  // Drivers
  testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
  testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
  testCompile("com.github.detro.ghostdriver:phantomjsdriver:1.1.0") {
    // phantomjs driver pulls in a different selenium version
    transitive = false
  }
}

drivers.each { driver ->
  task "${driver}Test"(type: Test) {
    reports {
      html.destination = reporting.file("$name/tests")
      junitXml.destination = file("$buildDir/test-results/$name")
    }

    outputs.upToDateWhen { false }  // Always run tests

    systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
    systemProperty "geb.env", driver
  }
}

chromeTest {
  dependsOn unzipChromeDriver

  def chromedriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "chromedriver.exe" : "chromedriver"
  systemProperty "webdriver.chrome.driver", new File(unzipChromeDriver.outputs.files.singleFile, chromedriverFilename).absolutePath
}

phantomJsTest {
  dependsOn unzipPhantomJs

  def phantomJsFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "phantomjs.exe" : "bin/phantomjs"
  systemProperty "phantomjs.binary.path", new File(unzipPhantomJs.outputs.files.singleFile, phantomJsFilename).absolutePath
}

test {
  dependsOn drivers.collect { tasks["${it}Test"] }
  enabled = false
}